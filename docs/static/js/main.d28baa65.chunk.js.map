{"version":3,"sources":["component/CategoryAdd.js","helpers/getGifs.js","component/GifGridItem.js","component/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["CategoryAdd","setTeam","useState","inputvalue","setinputvalue","onSubmit","e","preventDefault","team","alert","type","value","onChange","target","protoTypes","PropTypes","func","isRequired","getGifs","categorie","a","url","encodeURI","fetch","res","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","category","loading","state","setState","useEffect","then","imgs","useFetchGif","GifExpertApp","ReactDOM","render","document","getElementById"],"mappings":"4MAGMA,EAAc,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QAAc,EACGC,mBAAS,IADZ,mBAC1BC,EAD0B,KACdC,EADc,KAejC,OACI,sBAAMC,SAVW,SAACC,GAClBA,EAAEC,iBACGJ,EAILF,GAAQ,SAAAO,GAAI,MAAI,CAACL,MAHZM,MAAM,kBAOX,SACI,uBACIC,KAAK,OACLC,MAAQR,EACRS,SAlBc,SAACN,GACvBF,EAAcE,EAAEO,OAAOF,aAwB/BX,EAAYc,WAAa,CACrBb,QAASc,IAAUC,KAAKC,YAGbjB,Q,8BCjCFkB,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACbC,EADa,iDACoCC,UAAUH,GAD9C,+DAEDI,MAAOF,GAFN,cAEbG,EAFa,gBAGEA,EAAIC,OAHN,uBAGZC,EAHY,EAGZA,KACDC,EAAOD,EAAKE,KAAK,SAAAC,GAAQ,IAAD,EAC1B,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QARvB,kBAYZM,GAZY,4CAAH,sDCULO,EATK,SAAC,GAAuB,EAArBJ,GAAsB,IAAlBC,EAAiB,EAAjBA,MAAOV,EAAU,EAAVA,IAC9B,OACI,sBAAKc,UAAU,8CAAf,UACI,qBAAKC,IAAKf,EAAKgB,IAAKN,IACpB,4BAAIA,QCuBDO,EAxBC,SAAC,GAAmB,IAAjBnB,EAAgB,EAAhBA,UAAgB,ECDR,SAAEoB,GAAe,IAAD,EACbrC,mBAAS,CAC/BwB,KAAM,GACNc,SAAU,IAHyB,mBAChCC,EADgC,KACzBC,EADyB,KAcvC,OARAC,qBAAU,WACNzB,EAASqB,GACRK,MAAK,SAAAC,GAAI,OAAIH,EAAS,CACnBhB,KAAMmB,EACNL,SAAS,SAEf,CAAED,IAEGE,EDZyBK,CAAY3B,GAAhCa,EADmB,EACxBN,KAAac,EADW,EACXA,QAEpB,OACI,qCACI,mCAAMrB,EAAN,OACCqB,GAAW,wCACZ,qBAAKL,UAAU,YAAf,SAEQH,EAAOJ,KAAK,SAAAC,GACR,OACI,cAAC,EAAD,eAESA,GADAA,EAAIC,aEa1BiB,G,MAzBM,WAAM,MAEC7C,mBAAS,CAAC,OAFX,mBAEhBM,EAFgB,KAEVP,EAFU,KAIvB,OACI,qCACI,8CACA,cAAC,EAAD,CAAaA,QAAYA,IACzB,uBAIA,6BAEQO,EAAKoB,KAAK,SAAApB,GACF,OAAO,cAAC,EAAD,CAECW,UAAYX,GADPA,aCjBxCwC,IAASC,OACL,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.d28baa65.chunk.js","sourcesContent":["import React, { useState } from 'react'\nimport PropTypes from \"prop-types\";\n\nconst CategoryAdd = ( {setTeam} ) => {\n    const [inputvalue, setinputvalue] = useState('');\n    const handleInputChange = (e) =>{\n        setinputvalue(e.target.value);\n    }\n\n    const handleSubmit = (e) =>{\n        e.preventDefault();\n        if (!inputvalue) {\n             alert('Ingrese valor');\n             return;\n        }\n        setTeam(team => [inputvalue]);\n    }\n\n    return (\n        <form onSubmit={handleSubmit}> \n            <input \n                type=\"text\" \n                value={ inputvalue }\n                onChange={ handleInputChange }\n            />\n            \n        </form>\n    )\n}\n\nCategoryAdd.protoTypes = {\n    setTeam: PropTypes.func.isRequired\n}\n\nexport default CategoryAdd;\n","\nexport const getGifs = async( categorie ) => {\n    const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI(categorie) }&limit=10&api_key=aOCEWGaJs0xpiKrDJn6nThZVtIM0ceNk`;\n    const res = await fetch( url );\n    const {data} = await res.json();\n    const gifs = data.map( img => {\n        return {\n            id: img.id,\n            title: img.title,\n            url: img.images?.downsized_medium.url\n        }\n    })\n    \n    return(gifs)\n} ","import React from 'react'\n\nconst GifGridItem = ( {id, title, url} ) => {\n    return (\n        <div className=\"gifstyle  animate__animated animate__bounce\" >\n            <img src={url} alt={title}  ></img>\n            <p>{title}</p>\n        </div>\n    )\n}\n\nexport default GifGridItem\n","import React ,{useEffect, useState}from 'react'\nimport { getGifs } from '../helpers/getGifs';\nimport { useFetchGif } from '../hooks/useFetchGifs';\nimport GifGridItem from './GifGridItem';\n\nconst GifGrid = ({ categorie }) => {\n   const { data:images, loading } = useFetchGif(categorie);\n\n    return (\n        <>\n            <h3> {categorie} </h3>\n            {loading && <p>Loading</p> }\n            <div className=\"card-grid\" > \n                {\n                    images.map( img => {\n                        return  (\n                            <GifGridItem \n                                key={img.id}\n                                { ...img } \n                            />\n                        )\n                    })\n                }\n            \n            </div>\n        </>\n    )\n}\n\nexport default GifGrid;\n","import { useEffect, useState } from \"react\"\nimport { getGifs } from \"../helpers/getGifs\";\n\n\nexport const useFetchGif = ( category ) => {\n    const [state, setState] = useState({\n        data: [],\n        loading : true\n    })\n\n    useEffect(()=>{\n        getGifs( category )\n        .then(imgs => setState({\n            data: imgs,\n            loading: false\n        }));\n    },[ category ]);\n\n    return state ;\n}","import React ,{useState} from 'react';\nimport CategoryAdd from './component/CategoryAdd';\nimport GifGrid from './component/GifGrid';\nimport './index.css';\n\nconst GifExpertApp = () => {\n    // const categories = ['Dreamcatcher', 'RedVelvet','G-idle'];\n    const [team, setTeam] = useState(['IU']);\n\n    return (\n        <>\n            <h2>GifExpertApp</h2>\n            <CategoryAdd setTeam = { setTeam } />\n            <hr />\n\n            {/* <button onClick={ handleAddTeam } > Agregar Team </button> */}\n\n            <ol>\n                {\n                    team.map( team => {\n                            return <GifGrid\n                                    key={team} \n                                    categorie={ team } />;\n                    })\n                }\n            </ol>\n        </>\n    )\n}\n\nexport default GifExpertApp\n"," import React from 'react';\n import ReactDOM from 'react-dom';\n import GifExpertApp from './GifExpertApp';\n\n ReactDOM.render(\n     <GifExpertApp />,\n     document.getElementById('root')\n);\n"],"sourceRoot":""}